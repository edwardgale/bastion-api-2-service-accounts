{
  "service": {
    "service": "bastion-vpc",
    "serviceObject": {
      "name": "bastion-vpc"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*?]+?)}",
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "eu-west-1",
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "VPC creation for Bastion API VPC",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "EnableDnsSupport": true,
              "EnableDnsHostnames": true,
              "CidrBlock": "10.2.0.0/16",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    ]
                  }
                }
              ]
            }
          },
          "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Pub Private API VPC"
                }
              ]
            }
          },
          "PrivateRoute1": {
            "Type": "AWS::EC2::Route",
            "Properties": {
              "RouteTableId": {
                "Ref": "PrivateRouteTable"
              },
              "DestinationCidrBlock": "172.16.10.10/32",
              "NetworkInterfaceId": {
                "Fn::Select": [
                  0,
                  {
                    "Fn::GetAtt": [
                      "VPCE",
                      "NetworkInterfaceIds"
                    ]
                  }
                ]
              }
            }
          },
          "PrivateSubnetARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PrivateSubnetA"
              },
              "RouteTableId": {
                "Ref": "PrivateRouteTable"
              }
            }
          },
          "PrivateSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": "10.2.1.0/24",
              "AvailabilityZone": {
                "Fn::Select": [
                  0,
                  {
                    "Fn::GetAZs": {
                      "Ref": "AWS::Region"
                    }
                  }
                ]
              },
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Ref": "AWS::StackName"
                        },
                        "-PrivateSubnet1A"
                      ]
                    ]
                  }
                }
              ]
            }
          },
          "NLB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
              "IpAddressType": "ipv4",
              "Scheme": "internal",
              "Subnets": [
                {
                  "Ref": "PrivateSubnetA"
                }
              ],
              "Type": "network"
            }
          },
          "ApiEndpointTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
              "HealthCheckEnabled": true,
              "Name": "Bastion-vpc",
              "Port": 80,
              "Protocol": "TCP",
              "TargetType": "ip",
              "Targets": [
                {
                  "Id": "10.2.1.10",
                  "Port": 443,
                  "AvailabilityZone": "eu-west-1a"
                }
              ],
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "NLBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
              "DefaultActions": [
                {
                  "Type": "forward",
                  "TargetGroupArn": {
                    "Ref": "ApiEndpointTargetGroup"
                  }
                }
              ],
              "LoadBalancerArn": {
                "Ref": "NLB"
              },
              "Port": 443,
              "Protocol": "TCP"
            }
          },
          "VpcLink": {
            "Type": "AWS::ApiGateway::VpcLink",
            "Properties": {
              "Description": "VPC Link",
              "Name": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "-VpcLink"
                  ]
                ]
              },
              "TargetArns": [
                {
                  "Ref": "NLB"
                }
              ]
            }
          },
          "EndpointSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "GroupDescription": "SG for API Gateway Private endpoint",
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "443",
                  "ToPort": "443",
                  "CidrIp": "10.2.1.0/24"
                }
              ],
              "SecurityGroupEgress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": "0",
                  "ToPort": "65535",
                  "CidrIp": "0.0.0.0/0"
                }
              ],
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Ref": "AWS::StackName"
                        },
                        "-SG"
                      ]
                    ]
                  }
                }
              ]
            }
          },
          "VPCE": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
              "PrivateDnsEnabled": true,
              "SecurityGroupIds": [
                {
                  "Ref": "EndpointSG"
                }
              ],
              "ServiceName": "com.amazonaws.eu-west-1.execute-api",
              "SubnetIds": [
                {
                  "Ref": "PrivateSubnetA"
                }
              ],
              "VpcEndpointType": "Interface",
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "VpceIpResolverLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "ZipFile": "const AWS = require('aws-sdk'); const response = require('cfn-response'); exports.handler = async function(event, context) {\n  console.log(event);\n  console.log(JSON.stringify(event));\n  if (event.RequestType === 'Delete') {\n    response.send(event, context, response.SUCCESS);\n    return;\n  }\n  var input = parseInt(event.ResourceProperties.Input);\n  var responseData = {Value: input * 5};\n  const ec2 = new AWS.EC2({apiVersion: '2016-11-15'});\n  const vpce = await  ec2.describeVpcEndpoints({VpcEndpointIds: [event.ResourceProperties.VpceRef]}).promise();\n  console.log(vpce.VpcEndpoints[0].NetworkInterfaceIds);\n  const enis = vpce.VpcEndpoints[0].NetworkInterfaceIds;\n  const networkInterfaces = await ec2.describeNetworkInterfaces({NetworkInterfaceIds: enis}).promise();\n  console.log(JSON.stringify(networkInterfaces));\n  const ips = networkInterfaces.map(interface => interface.PrivateIpAddress);\n  console.log(ips);\n\n  console.log(event.ResourceProperties.VpceRef);\n  console.log(vpce);\n  response.send(event, context, response.SUCCESS, responseData);\n};\n"
              },
              "Handler": "index.handler",
              "Runtime": "nodejs12.x",
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              },
              "FunctionName": "bastion-vpc-lambda-eni-resolver"
            }
          },
          "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "root",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "arn:aws:logs:*:*:*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ec2:DescribeVpcEndpoints",
                          "ec2:describeNetworkInterfaces"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "VpceIpResolver": {
            "Type": "Custom::VpceIpResolver",
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "VpceIpResolverLambda",
                  "Arn"
                ]
              },
              "VpceRef": {
                "Ref": "VPCE"
              },
              "VpceRef1": {
                "Ref": "VPCE"
              },
              "TargetGroupRef": {
                "Ref": "ApiEndpointTargetGroup"
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "VpceIpResolverLambda",
                  "Arn"
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "VpcId": {
            "Value": {
              "Ref": "VPC"
            },
            "Description": "VPC ID of newly created VPC",
            "Export": {
              "Name": "PublicVPC"
            }
          },
          "BastionPrivateSubnetA": {
            "Value": {
              "Ref": "PrivateSubnetA"
            },
            "Description": "Private Subnet in AZ 1",
            "Export": {
              "Name": "BastionPrivateSubnetA"
            }
          },
          "BastionVpcLink": {
            "Value": {
              "Ref": "VpcLink"
            },
            "Description": "VPC Link",
            "Export": {
              "Name": "BastionVpcLink"
            }
          },
          "PublicEndpointSG": {
            "Value": {
              "Ref": "EndpointSG"
            },
            "Description": "SG for API Gateway Private endpoint",
            "Export": {
              "Name": "PublicEndpointSG"
            }
          },
          "BastionVpce": {
            "Value": {
              "Ref": "VPCE"
            },
            "Description": "VPC endpoint",
            "Export": {
              "Name": "BastionVpce"
            }
          },
          "BastionVpceDNS": {
            "Value": {
              "Fn::Join": [
                ",",
                {
                  "Fn::GetAtt": [
                    "VPCE",
                    "NetworkInterfaceIds"
                  ]
                }
              ]
            },
            "Description": "Network interfaces",
            "Export": {
              "Name": "BastionVpceDNS"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "pluginsData": {},
    "functions": {},
    "resources": {
      "Description": "VPC creation for Bastion API VPC",
      "Resources": {
        "VPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "EnableDnsSupport": true,
            "EnableDnsHostnames": true,
            "CidrBlock": "10.2.0.0/16",
            "Tags": [
              {
                "Key": "Name",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                }
              }
            ]
          }
        },
        "PrivateRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": "Pub Private API VPC"
              }
            ]
          }
        },
        "PrivateRoute1": {
          "Type": "AWS::EC2::Route",
          "Properties": {
            "RouteTableId": {
              "Ref": "PrivateRouteTable"
            },
            "DestinationCidrBlock": "172.16.10.10/32",
            "NetworkInterfaceId": {
              "Fn::Select": [
                0,
                {
                  "Fn::GetAtt": [
                    "VPCE",
                    "NetworkInterfaceIds"
                  ]
                }
              ]
            }
          }
        },
        "PrivateSubnetARouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PrivateSubnetA"
            },
            "RouteTableId": {
              "Ref": "PrivateRouteTable"
            }
          }
        },
        "PrivateSubnetA": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "CidrBlock": "10.2.1.0/24",
            "AvailabilityZone": {
              "Fn::Select": [
                0,
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "AWS::StackName"
                      },
                      "-PrivateSubnet1A"
                    ]
                  ]
                }
              }
            ]
          }
        },
        "NLB": {
          "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "Properties": {
            "IpAddressType": "ipv4",
            "Scheme": "internal",
            "Subnets": [
              {
                "Ref": "PrivateSubnetA"
              }
            ],
            "Type": "network"
          }
        },
        "ApiEndpointTargetGroup": {
          "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
          "Properties": {
            "HealthCheckEnabled": true,
            "Name": "Bastion-vpc",
            "Port": 80,
            "Protocol": "TCP",
            "TargetType": "ip",
            "Targets": [
              {
                "Id": "10.2.1.10",
                "Port": 443,
                "AvailabilityZone": "eu-west-1a"
              }
            ],
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "NLBListener": {
          "Type": "AWS::ElasticLoadBalancingV2::Listener",
          "Properties": {
            "DefaultActions": [
              {
                "Type": "forward",
                "TargetGroupArn": {
                  "Ref": "ApiEndpointTargetGroup"
                }
              }
            ],
            "LoadBalancerArn": {
              "Ref": "NLB"
            },
            "Port": 443,
            "Protocol": "TCP"
          }
        },
        "VpcLink": {
          "Type": "AWS::ApiGateway::VpcLink",
          "Properties": {
            "Description": "VPC Link",
            "Name": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-VpcLink"
                ]
              ]
            },
            "TargetArns": [
              {
                "Ref": "NLB"
              }
            ]
          }
        },
        "EndpointSG": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "GroupDescription": "SG for API Gateway Private endpoint",
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "10.2.1.0/24"
              }
            ],
            "SecurityGroupEgress": [
              {
                "IpProtocol": "tcp",
                "FromPort": "0",
                "ToPort": "65535",
                "CidrIp": "0.0.0.0/0"
              }
            ],
            "Tags": [
              {
                "Key": "Name",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "AWS::StackName"
                      },
                      "-SG"
                    ]
                  ]
                }
              }
            ]
          }
        },
        "VPCE": {
          "Type": "AWS::EC2::VPCEndpoint",
          "Properties": {
            "PrivateDnsEnabled": true,
            "SecurityGroupIds": [
              {
                "Ref": "EndpointSG"
              }
            ],
            "ServiceName": "com.amazonaws.eu-west-1.execute-api",
            "SubnetIds": [
              {
                "Ref": "PrivateSubnetA"
              }
            ],
            "VpcEndpointType": "Interface",
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "VpceIpResolverLambda": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "ZipFile": "const AWS = require('aws-sdk'); const response = require('cfn-response'); exports.handler = async function(event, context) {\n  console.log(event);\n  console.log(JSON.stringify(event));\n  if (event.RequestType === 'Delete') {\n    response.send(event, context, response.SUCCESS);\n    return;\n  }\n  var input = parseInt(event.ResourceProperties.Input);\n  var responseData = {Value: input * 5};\n  const ec2 = new AWS.EC2({apiVersion: '2016-11-15'});\n  const vpce = await  ec2.describeVpcEndpoints({VpcEndpointIds: [event.ResourceProperties.VpceRef]}).promise();\n  console.log(vpce.VpcEndpoints[0].NetworkInterfaceIds);\n  const enis = vpce.VpcEndpoints[0].NetworkInterfaceIds;\n  const networkInterfaces = await ec2.describeNetworkInterfaces({NetworkInterfaceIds: enis}).promise();\n  console.log(JSON.stringify(networkInterfaces));\n  const ips = networkInterfaces.map(interface => interface.PrivateIpAddress);\n  console.log(ips);\n\n  console.log(event.ResourceProperties.VpceRef);\n  console.log(vpce);\n  response.send(event, context, response.SUCCESS, responseData);\n};\n"
            },
            "Handler": "index.handler",
            "Runtime": "nodejs12.x",
            "Timeout": 30,
            "Role": {
              "Fn::GetAtt": [
                "LambdaExecutionRole",
                "Arn"
              ]
            },
            "FunctionName": "bastion-vpc-lambda-eni-resolver"
          }
        },
        "LambdaExecutionRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "root",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ec2:DescribeVpcEndpoints",
                        "ec2:describeNetworkInterfaces"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "VpceIpResolver": {
          "Type": "Custom::VpceIpResolver",
          "Properties": {
            "ServiceToken": {
              "Fn::GetAtt": [
                "VpceIpResolverLambda",
                "Arn"
              ]
            },
            "VpceRef": {
              "Ref": "VPCE"
            },
            "VpceRef1": {
              "Ref": "VPCE"
            },
            "TargetGroupRef": {
              "Ref": "ApiEndpointTargetGroup"
            },
            "FunctionName": {
              "Fn::GetAtt": [
                "VpceIpResolverLambda",
                "Arn"
              ]
            }
          }
        }
      },
      "Outputs": {
        "VpcId": {
          "Value": {
            "Ref": "VPC"
          },
          "Description": "VPC ID of newly created VPC",
          "Export": {
            "Name": "PublicVPC"
          }
        },
        "BastionPrivateSubnetA": {
          "Value": {
            "Ref": "PrivateSubnetA"
          },
          "Description": "Private Subnet in AZ 1",
          "Export": {
            "Name": "BastionPrivateSubnetA"
          }
        },
        "BastionVpcLink": {
          "Value": {
            "Ref": "VpcLink"
          },
          "Description": "VPC Link",
          "Export": {
            "Name": "BastionVpcLink"
          }
        },
        "PublicEndpointSG": {
          "Value": {
            "Ref": "EndpointSG"
          },
          "Description": "SG for API Gateway Private endpoint",
          "Export": {
            "Name": "PublicEndpointSG"
          }
        },
        "BastionVpce": {
          "Value": {
            "Ref": "VPCE"
          },
          "Description": "VPC endpoint",
          "Export": {
            "Name": "BastionVpce"
          }
        },
        "BastionVpceDNS": {
          "Value": {
            "Fn::Join": [
              ",",
              {
                "Fn::GetAtt": [
                  "VPCE",
                  "NetworkInterfaceIds"
                ]
              }
            ]
          },
          "Description": "Network interfaces",
          "Export": {
            "Name": "BastionVpceDNS"
          }
        }
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/bastion-vpc/dev/1582148294781-2020-02-19T21:38:14.781Z",
    "artifact": ""
  }
}