{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC creation for Bastion API VPC",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "CidrBlock": "10.2.0.0/16",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Pub Private API VPC"
          }
        ]
      }
    },
    "PrivateRoute1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "172.16.10.10/32",
        "NetworkInterfaceId": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAtt": [
                "VPCE",
                "NetworkInterfaceIds"
              ]
            }
          ]
        }
      }
    },
    "PrivateSubnetARouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.2.1.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-PrivateSubnet1A"
                ]
              ]
            }
          }
        ]
      }
    },
    "NLB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "IpAddressType": "ipv4",
        "Scheme": "internal",
        "Subnets": [
          {
            "Ref": "PrivateSubnetA"
          }
        ],
        "Type": "network"
      }
    },
    "MyTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckEnabled": true,
        "Name": "MyTargets",
        "Port": 443,
        "Protocol": "TCP",
        "TargetType": "ip",
        "Targets": [
          {
            "Id": "10.2.1.10",
            "Port": 443,
            "AvailabilityZone": "eu-west-1a"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "VpcLink": {
      "Type": "AWS::ApiGateway::VpcLink",
      "Properties": {
        "Description": "VPC Link",
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-VpcLink"
            ]
          ]
        },
        "TargetArns": [
          {
            "Ref": "NLB"
          }
        ]
      }
    },
    "EndpointSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "SG for API Gateway Private endpoint",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "10.2.1.0/24"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-SG"
                ]
              ]
            }
          }
        ]
      }
    },
    "VPCE": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Ref": "EndpointSG"
          }
        ],
        "ServiceName": "com.amazonaws.eu-west-1.execute-api",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnetA"
          }
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "VpcId": {
      "Value": {
        "Ref": "VPC"
      },
      "Description": "VPC ID of newly created VPC",
      "Export": {
        "Name": "PublicVPC"
      }
    },
    "BastionPrivateSubnetA": {
      "Value": {
        "Ref": "PrivateSubnetA"
      },
      "Description": "Private Subnet in AZ 1",
      "Export": {
        "Name": "BastionPrivateSubnetA"
      }
    },
    "BastionVpcLink": {
      "Value": {
        "Ref": "VpcLink"
      },
      "Description": "VPC Link",
      "Export": {
        "Name": "BastionVpcLink"
      }
    },
    "PublicEndpointSG": {
      "Value": {
        "Ref": "EndpointSG"
      },
      "Description": "SG for API Gateway Private endpoint",
      "Export": {
        "Name": "PublicEndpointSG"
      }
    },
    "BastionVpce": {
      "Value": {
        "Ref": "VPCE"
      },
      "Description": "VPC endpoint",
      "Export": {
        "Name": "BastionVpce"
      }
    },
    "BastionVpceDNS": {
      "Value": {
        "Fn::Join": [
          ",",
          {
            "Fn::GetAtt": [
              "VPCE",
              "NetworkInterfaceIds"
            ]
          }
        ]
      },
      "Description": "Network interfaces",
      "Export": {
        "Name": "BastionVpceDNS"
      }
    }
  }
}