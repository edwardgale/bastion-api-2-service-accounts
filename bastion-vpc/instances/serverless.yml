
service: public-instances-api

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'personal'}
  region: ${self:custom.standardVars.region, 'eu-west-1'}

resources:
  Description: Instance creation for Public API VPC
  Resources:
    PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: vpc-032f93a9754159bbe
        CidrBlock: 10.2.0.0/24
        AvailabilityZone:
          !Select
          - 0
          - !GetAZs
            Ref: 'AWS::Region'
        Tags:
          - Key: Name
            Value:
              Fn::Join:
                - ''
                - - Ref: AWS::StackName
                  - -Public-A
    PublicSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetA
        RouteTableId: !Ref PublicRouteTable
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      DependsOn: VPC
    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: vpc-032f93a9754159bbe
        InternetGatewayId: !Ref InternetGateway
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: vpc-032f93a9754159bbe
        Tags:
          - Key: Name
            Value: Public

    PublicRoute1:   # Public route table has direct routing to IGW:
      Type: AWS::EC2::Route
      DependsOn: AttachGateway
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    WebSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: vpc-032f93a9754159bbe
        GroupDescription: Enable HTTP access via user defined port
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
        Tags:
          - Key: Name
            Value:
              Fn::Join:
                - ''
                - - Ref: AWS::StackName
                  - -ec2-sg-endpoint
    InstanceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName:
          Fn::Join:
            - ''
            - - Ref: AWS::StackName
              - -ec2-role

        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "ec2.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          -
            PolicyName: "instance"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action: "ec2:DescribeNetworkInterfaces"
                  Resource: "*"
                -
                  Effect: "Allow"
                  Action: "ec2:DescribeNetworkInterfaceAttribute"
                  Resource: "*"

    InstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Path: "/"
        Roles:
          -
            Ref: InstanceRole
    WebInstance:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: t2.micro
        ImageId: ami-07683a44e80cd32c5
        KeyName: public-api-ec2
        SecurityGroupIds:
          - !Ref WebSecurityGroup
        SubnetId:  subnet-0ccef00f8b3d74d3e
        IamInstanceProfile: !Ref InstanceProfile
        Tags:
          -
            Key: Name
            Value:
              Fn::Join:
                - ''
                - - Ref: AWS::StackName
                  - -ec2-instance